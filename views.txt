#from django.shortcuts import render_template
#from django.http import redirect, HttpResponse
#from MainApp. import Medicine,Users,Orders,Purchase
#from django.core.exceptions import ObjectDoesNotExist
from datetime import datetime
from flask import Flask, redirect, request, render_template

app=Flask(__name__)

PACKING_TYPE=(
	("S","Strip"),
	("B","Bottle"),
	("P","Packet"),
)
class Medicine():
	medid=AutoField(primary_key=True)
	name=CharField(max_length=50)
	solution=CharField(max_length=100)
	company=CharField(max_length=50)
	packing=CharField(max_length=1,choices=PACKING_TYPE)
	mfg=DateField()
	expiry=DateField()
	saltinfo=TextField()
	price=DecimalField( max_digits=7, decimal_places=2)
	
	def __unicode__(self):
		return self.name+"-"+self.solution
	
class Users():
	userid=AutoField(primary_key=True)
	userfname=CharField(max_length=50)
	userlname=CharField(max_length=50) 
	gender=CharField(max_length=1,choices=(("M","Male"),("F","Female"),))
	useremail=EmailField()
	userpass=CharField(max_length=20)
	userph=IntegerField()
	useradd1=CharField(max_length=70)
	useradd2=CharField(max_length=50)
	def __unicode__(self):
		return self.userfname+" "+self.userlname

	
class Orders():
	orderid=AutoField(primary_key=True)
	date=DateField()
	shipaddress=CharField(max_length=200)
	def __unicode__(self):
		return str(self.orderid)
	
	
class Purchase():
	userid=ForeignKey(Users)
	item=ForeignKey(Medicine)
	quantity=IntegerField()
	def __unicode__(self):
		return "User: "+str(self.userid)+" Order: "+str(self.item)


@app.route('/')
def HomePage():
	l=CartList(request)
	isLoggedin=False
	u,isLoggedin=LogCheck(request)
	return render_template('main.html',{'u':u,'log':isLoggedin,'l':l,'total':len(l),'redirect':"main",})


@app.route('/search/<regex([A-Za-z0-9]+):query>')
def SearchPage(query):
	l=CartList(request)
	u,isLoggedin=LogCheck(request)
	m=Medicine.objects.filter(name__contains=query)
	return render_template('search.html',{'m':m,'query':query,'l':l,'total':len(l),'u':u,'log':isLoggedin,'redirect':"search/"+query,})

@app.route('/product/<regex([A-Za-z0-9]+):id>')
def ProductPage(id):
	m=Medicine.objects.get(medid__iexact=id)
	l=CartList(request)
	u,isLoggedin=LogCheck(request)
	return render_template('product.html',{'m':m,'l':l,'total':len(l),'u':u,'log':isLoggedin,'redirect':"product/"+id,})

def CartList(request):
	value=request.COOKIES.get('Items_count')
	arr=[]
	if(value==None):
		arr=[]
	else:
		arr=value.split("-")
		arr=arr[:len(arr)-1]
	l=[]
	for i in arr:
		kval=request.COOKIES.get('Item'+i).split("-")
		med=Medicine.objects.get(medid=int(kval[0]))
		l.append(Cart(med,int(kval[1])))
	return l

@app.route('/cookie')
def CheckCookie():
	if request.session.test_cookie_worked():
		print(">>>> TEST COOKIE WORKED!")
		request.session.delete_test_cookie()


@app.route('/addtobasket/<regex([A-Za-z0-9]+):id>/<int:count>')	
def AddBasket(id,count):
	u=Medicine.objects.get(medid=id)
	#prin u.name
	#print count
	value=request.COOKIES.get('Items_count')
	#print value
	response=redirect('/product/'+str(id))
	if value==None:
		response.set_cookie('Items_count', str(u.medid)+"-")
	else:
		if str(u.medid) not in value.split("-"): 
			response.set_cookie('Items_count', value+str(u.medid)+"-")
	value1=request.COOKIES.get('Item'+str(u.medid))
	if value1==None:
		#print ">>>>>NEW"
		response.set_cookie('Item'+str(u.medid),str(id)+"-"+str(count))
	else:
		#print ">>>>> Already Created"
		c=int(value1.split("-")[1])
		#print value1;
		response.set_cookie("Item"+id,str(id)+"-"+str(int(count)+c))
	return response

@app.route('/clearcart')
def ClearCart():
	response=redirect('/main/')
	if request.COOKIES.has_key('Items_count'):
		value=request.COOKIES.get('Items_count')
		arr=value.split("-")
		arr=arr[:len(arr)-1]
		response.delete_cookie('Items_count')
		for i in arr:
			response.delete_cookie('Item'+i)
	return response

@app.route('/removeitem/<regex([A-Za-z0-9]+):id>')
def RemoveItem(id):
	response=redirect('/'+redirect+'/')
	if request.COOKIES.has_key('Items_count'):
		value=request.COOKIES.get('Items_count').split("-")
		del(value[value.index(id)])
		response.set_cookie('Items_count',"-".join(value))
		response.delete_cookie('Item'+id)
	return response

@app.route('/checkout')
def Checkout():
	l=CartList(request)
	u,isLoggedin=LogCheck(request)
	totalitem=0
	totalprice=0
	for i in l:
		totalitem+=i.count
		totalprice+=i.price
	return render_template('checkout.html',{'l':l,'total':len(l),'u':u,'log':isLoggedin,'totalitem':totalitem,'totalprice':totalprice,})

@app.route('/thanks')
def OrderProcess():
	l=CartList(request)
	u,isLoggedin=LogCheck(request)
	if isLoggedin:
		order=Orders(date=datetime.now().date(),shipaddress=u.useradd1+","+u.useradd2)
		order.save()
		for i in l:
			p=Purchase(userid=Users.objects.get(userid=u.userid),item=Medicine.objects.get(medid=i.med.medid),quantity=i.count)
			p.save()
		return redirect('/clearcart/')
	else:
		return redirect('/main/')
	
class Cart():
	def __init__(self,med,count):
		self.med=med
		self.count=count
		self.price=med.price*count

if (__name__=='__main__'):
	app.run(host='0.0.0.0',port=5005)